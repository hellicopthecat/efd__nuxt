generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             Int         @id @default(autoincrement())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  uid            String      @unique
  email          String      @unique
  name           String?
  password       String?
  googleId       String?     @unique
  kakaoId        String?     @unique
  avatarUrl      String?
  alertToken     String?
  address        UserAddress @relation(fields: [userAddressId], references: [id], onDelete: Cascade)
  ChatRoom       ChatRoom[]
  sellItem       Item[]      @relation(name: "sell")
  buyItem        Item[]      @relation(name: "buy")
  interestedItem Item[]      @relation("interested")
  Chat           Chat[]
  userAddressId  Int
}

model UserAddress {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  sido         String
  sigungu      String
  bname        String
  bname1       String?
  roadAddress  String
  buildingNmae String
  restAddress  String?
  zonecode     String
  user         User[]
}

model Item {
  id             Int        @id @default(autoincrement())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  itemName       String
  itemFileName   String
  itemPrice      String
  itemImageUrl   String
  itemDesc       String
  itemSido       String
  itemSigungu    String
  itemRoadAdress String
  itemRestAdress String
  complete       Boolean    @default(false)
  seller         User       @relation(name: "sell", fields: [sellerID], references: [id], onDelete: Cascade)
  buyer          User?      @relation(name: "buy", fields: [buyerID], references: [id], map: "Item_Buyer_fKey")
  ChatRoom       ChatRoom[]
  sellerID       Int
  buyerID        Int?
  interested     User[]     @relation("interested")
}

model ChatRoom {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
  chat      Chat[]
  Item      Item?    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    Int?
}

model Chat {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updateAt   DateTime  @updatedAt
  chat       String
  user       User?     @relation(fields: [userId], references: [id])
  ChatRoom   ChatRoom? @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId String?
  userId     Int?
}
