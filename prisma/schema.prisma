// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "sqlite"
  // url      = env("DATABASE_URL")
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             Int         @id @default(autoincrement())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  uid            String      @unique
  email          String      @unique
  name           String?
  password       String?
  address        UserAddress @relation(fields: [userAddressId], references: [id], onDelete: Cascade)
  googleId       String?
  kakaoId        String?
  avatarUrl      String?
  sellItem       Item[]      @relation("sell")
  buyItem        Item[]      @relation("buy")
  userAddressId  Int
  interestedItem Item[]      @relation("interested")

  ChatRoom   ChatRoom? @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId String?
}

model UserAddress {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  sido         String
  sigungu      String
  bname        String
  bname1       String?
  roadAddress  String
  buildingNmae String
  restAddress  String?
  zonecode     String

  User User[]
}

model Item {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  itemName       String
  itemFileName   String
  itemPrice      String
  itemImageUrl   String
  itemDesc       String
  itemSido       String
  itemSigungu    String
  itemRoadAdress String
  itemRestAdress String
  complete       Boolean  @default(false)
  seller         User     @relation("sell", fields: [userId], references: [id], onDelete: Cascade, map: "Item_Seller_fKey")
  buyer          User?    @relation("buy", fields: [userId], references: [id], onDelete: Cascade, map: "Item_Buyer_fKey")
  interested     User[]   @relation("interested")
  userId         Int
}

model ChatRoom {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chat      Chat[]
  user      User[]
}

model Chat {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  chat      String

  ChatRoom   ChatRoom? @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId String?
}
